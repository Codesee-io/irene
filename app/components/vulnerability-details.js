import Ember from 'ember';
import ENUMS from 'irene/enums';
import ENV from 'irene/config/environment';

export default Ember.Component.extend({
  risks: ENUMS.RISK.CHOICES.slice(0, -1),
  isIgnoredAnalysis: true,
  isSavingStatus: false,

  vulnerabilityDetails: (function() {
    return this.get("store").find('vulnerability', this.get("vulnerability.id"));
  }).property(),

  riskOverridden: (function() {
    const riskOverridden = this.get("vulnerability.riskOverridden");
    return riskOverridden;
  }).property("vulnerability.riskOverridden"),

  saveVulnerabilityPreferences(data, type) {
    const profileId = this.get("project.activeProfileId");
    const vulnerabilityId = this.get("vulnerability.id");
    const url = [ENV.endpoints.profiles, profileId, ENV.endpoints.vulnerabilityPreferences, vulnerabilityId].join('/');
    this.set("isSavingStatus", true);
    this.get("ajax").put(url, {
      data
    }).then(() => {
      this.get("notify").success("Successful");
      this.set("isSavingStatus", false);
      if(type === "mark") {
        this.set("vulnerability.risk", data.risk);
        this.set("vulnerability.riskOverridden", true);
        this.set("riskOverridden", true);
      }
      else if(type === "ignore"){
        this.set("vulnerability.ignore", data.ignore);
      }
      else {
        this.set("riskOverridden", false);
        this.set("vulnerability.risk", data.risk);
      }
    }, (error) => {
      this.get("notify").error(error.payload.message);
      this.set("isSavingStatus", false);
    });
  },

  actions: {
    ignoreAnalysis() {
      const isIgnoredAnalysis = this.$('#ignore-analysis-project')[0].checked;
      const risk = this.get("vulnerability.risk");
      const data = {
        risk: risk,
        ignore: isIgnoredAnalysis
      };
      const type = "ignore";
      this.saveVulnerabilityPreferences(data, type);
    },
    selectMarkedAnalyis() {
      const markedRisk = parseInt(this.$('#marked-analysis-project')[0].value);
      const ignore = this.get("vulnerability.ignore");
      const data = {
        risk: markedRisk,
        ignore: ignore
      };
      const type = "mark";
      this.saveVulnerabilityPreferences(data, type);
    },
    editMarkedAnalysis() {
      this.set("riskOverridden", false);
      this.set("editMarkedAnalysis", true);
    },
    cancelEditMarking() {
      this.set("editMarkedAnalysis", false);
      if(this.get("vulnerability.riskOverridden")){
        this.set("riskOverridden", true);
      }
    },
    resetMarkedAnalysis() {
      const ignore = this.get("vulnerability.ignore");
      const data = {
        risk: null,
        ignore: ignore
      };
      const type = "reset";
      this.saveVulnerabilityPreferences(data, type);
    }
  }
});
