import { getOwner } from '@ember/application';
import { test, moduleForComponent } from 'ember-qunit';
import { startMirage } from 'irene/initializers/ember-cli-mirage';
import { run } from '@ember/runloop';
import tHelper from 'ember-intl/helpers/t';

moduleForComponent('vulnerability-details', 'Integration | Component | vulnerability details', {
  unit: true,
  needs: [
    'helper:risk-text',
    'helper:eq',
    'service:ajax',
    'service:notification-messages-service',
    'service:session',
    'config:environment',
    'service:intl',
    'ember-intl@adapter:default',
    'cldr:en',
    'cldr:ja',
    'translation:en',
    'util:intl/missing-message',
    'component:attach-tooltip',
    'component:ember-popper',
  ],
  beforeEach() {
    // set the locale and the config
    getOwner(this).lookup('service:intl').setLocale('en');

    this.registry.register('helper:t', tHelper);
    // start Mirage
    this.server = startMirage();
  },
  afterEach() {
    // shutdown Mirage
    this.server.shutdown();
  }
});

test('it exists', function(assert) {
  const component = this.subject();
  function storemock() {
    return [
      {
        id:1,
        type: "vulnerability",
        attributes: {
          name: "test"
        }
      }
    ];
  }
  var store = {
    find: storemock,
    peekRecord: storemock
  };
  component.set('store', store);
  this.render();
  run(function() {
    assert.deepEqual(component.get("vulnerabilityDetails"), [{
        id:1,
        type: "vulnerability",
        attributes: {
          name: "test"
        }
      }
    ]);
    component.set('vulnerability', {riskOverridden: 1, riskOverriddenComment: 'abc'});
    assert.equal(component.get('vulnerability.riskOverridden'), 1);
    assert.equal(component.get('vulnerability.riskOverriddenComment'), 'abc');
    assert.notOk(component.setProperties(1,"mark"));
    assert.notOk(component.setProperties(1,"ignore"));
    assert.notOk(component.setProperties(1,"reset"));
    component.set("project", {activeProfileId:1});
    component.set("vulnerability", {id:1});
    component.send("selectPreference");
    component.send("editPreference");
    component.send("cancelEdit");
    component.send("resetPreference");
  });
});
